pipeline {
    agent any
    environment {
        BRANCH = sh(script: 'echo $GIT_BRANCH | cut -b 8-14 | tr \'[:upper:]\' \'[:lower:]\' | tr \'/\' \'_\'', returnStdout: true).trim()
        IMAGE_TAG = "proyectodevopsbackend-$BRANCH:1.0.0-${BUILD_NUMBER}"
        CONTAINER_NAME = "proyectodevopsbackend-$BRANCH"
        LOGSTASH_IMAGE_TAG = "logstash:1.0.0-${BUILD_NUMBER}"
    }

    stages {
        stage('Build, Package & Tag') {
            steps {
                sh "docker build -t $IMAGE_TAG -f dockerfile.backend  ."
                sh "docker build -t $LOGSTASH_IMAGE_TAG -f dockerfile.logstash ."
            }
        }
        stage('Deploy') {
            steps {
                script {

                    // Deploy Elasticsearch
                    ELASTIC_CONTAINER_ID = sh(script: "docker ps -a -q --filter=\"name=elasticsearch-$BRANCH\"", returnStdout: true).trim()
                    if (ELASTIC_CONTAINER_ID) {
                        sh " docker stop $ELASTIC_CONTAINER_ID"
                        sh " docker rm $ELASTIC_CONTAINER_ID"
                    }
                    //sh "docker run -d --name elasticsearch-$BRANCH --network devops -p 9200:9200 -e discovery.type=single-node -e ES_JAVA_OPTS='-Xms512m -Xmx512m' -v es_data:/usr/share/elasticsearch/data docker.elastic.co/elasticsearch/elasticsearch:7.12.1"
                    sh 'docker run -d --name elasticsearch-$BRANCH -p 9200:9200 --network devops --ip 172.22.0.3 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.10.1'

                    //create a volume for the logs
                    sh 'docker volume create $CONTAINER_NAME-logs'

                    // Deploy the project container
                    CONTAINER_ID = sh(script: ' docker ps -a -q --filter="name=$CONTAINER_NAME"', returnStdout: true).trim()
                    if (CONTAINER_ID) {
                        sh "docker stop $CONTAINER_ID"
                        sh "docker rm $CONTAINER_ID"
                    } else {
                        echo "El contenedor no existe."
                    }
                    //sh "docker run -d --name $CONTAINER_NAME --network devops -v project_logs:/app/logs -p 3000:3000 $IMAGE_TAG"
                    sh 'docker run -d --name $CONTAINER_NAME -p 3000:3000 --network devops --ip 172.22.0.2 --mount source=$CONTAINER_NAME-logs,target=/logs $IMAGE_TAG'

                    // Deploy the Logstash container
                    LOGSTASH_CONTAINER_ID = sh(script: "docker ps -a -q --filter=\"name=logstash-$BRANCH\"", returnStdout: true).trim()
                    if (LOGSTASH_CONTAINER_ID) {
                        sh "docker stop $LOGSTASH_CONTAINER_ID"
                        sh "docker rm $LOGSTASH_CONTAINER_ID"
                    }
                
                   // sh "docker run -d --name logstash-$BRANCH --network devops --ip 172.22.0.5 --mount source=$CONTAINER_NAME-logs,target=/logs -v ${WORKSPACE}/logstash.config:/usr/share/logstash/config/logstash.config docker.elastic.co/logstash/logstash:7.10.1"
                    sh "docker run -it --rm --name logstash-$BRANCH --network devops --ip 172.22.0.5 --mount source=$CONTAINER_NAME-logs,target=/logs -v ${WORKSPACE}/logstash.config:/usr/share/logstash/config/logstash.conf docker.elastic.co/logstash/logstash:7.10.1 /bin/bash"
                        
                    // // Deploy Kibana
                    // KIBANA_CONTAINER_ID = sh(script: "docker ps -a -q --filter=\"name=kibana-$BRANCH\"", returnStdout: true).trim()
                    // if (KIBANA_CONTAINER_ID) {
                    //     sh "docker stop $KIBANA_CONTAINER_ID"
                    //     sh "docker rm $KIBANA_CONTAINER_ID"
                    // }
                    // sh "docker run -d --name kibana-$BRANCH --network devops -p 5601:5601 -e ELASTICSEARCH_URL=http://elasticsearch:9200 docker.elastic.co/kibana/kibana:7.12.1"
                }
            }
        }
    }
}