Generar nuevo módulo(entidad)
Este módulo se agrega automaticamente a app.modules para ser usado
    nest g res <nombre en plural> --no-spec
        - REST API
        - Generate CRUD "YES"
// localhost:3000/vehiculos  <- Por controlador
El controlador manda las solicitudes a los respectivos servicios


// https://docs.nestjs.com/techniques/database
En app.module desactivar 
    synchronize: true
Para no perder datos por cada ejecución

// Vehiculos es la entidad de ejemplo para usar nestjs



// app.module.ts tiene la configuración de la base de datos, modificarlo según lo vayan a usar, pero no subir cambios de ese archivo
// ya que los pipelines ya están configurados para ese usuario root de base de datos



// En http://localhost:3000/docs está el Swagger



// docker run -d   --name mysql-container   -e MYSQL_ROOT_PASSWORD=root   -e MYSQL_DATABASE=test   -p 3306:3306   mysql:latest


// Correr esto para que estén en la misma red y funcionen

// docker network create mi-red-docker
// docker network inspect mi-red-docker para ver la ip y ponerselo al .env

// docker run -d   --name mysql-container  --network mi-red-docker   -e MYSQL_ROOT_PASSWORD=root   -e MYSQL_DATABASE=test   -p 3306:3306   mysql:latest
// docker run -d --name proy3s --network mi-red-docker  -p 3000:3000 proyectodevopsbackend:3.0.0

docker-compose up
docker-compose -f docker-compose-mysql.yml up


docker run \
    --name mi_contenedor_postgres \
    -e POSTGRES_HOST=localhost \
    -e POSTGRES_DB=test \
    -e POSTGRES_USER=root \
    -e POSTGRES_PASSWORD=root \
    -e POSTGRES_PORT=5432 \
    -p 5432:5432 \
    -d \
    postgres:14


docker build -t proyectodevopsbackend:1.0.0 .
docker run -d --name proy1 -p 3000:3000 proyectodevopsbackend:1.0.0